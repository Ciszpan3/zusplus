import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { retirementData } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");

    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY is not configured");
    }

    console.log("Generating retirement recommendations for user");

    const systemPrompt = `Jeste≈õ ekspertem ds. emerytur i planowania finansowego. Analizujesz dane emerytalne u≈ºytkownika i generujesz 3-5 KONKRETNYCH, POLICJALNYCH rekomendacji.

DANE U≈ªYTKOWNIKA:
- Wiek: ${retirementData.wiek} lat
- P≈Çeƒá: ${retirementData.plec}
- Wiek emerytury: ${retirementData.wiek_przejscia_na_emeryture} lat
- Miesiƒôczny doch√≥d: ${retirementData.miesieczny_dochod} PLN
- Lata do emerytury: ${retirementData.lata_do_emerytury} lat
- Przysz≈Ça emerytura: ${Math.round(retirementData.przyszla_emerytura_realna)} PLN/mies.
- ≈örednia krajowa: ${Math.round(retirementData.srednia_krajowa_emerytura)} PLN/mies.
- R√≥≈ºnica vs ≈õrednia: ${retirementData.roznica_procent.toFixed(1)}%
- Status: ${retirementData.status_pogody}

ZASADY:
1. Generuj TYLKO rekomendacje, kt√≥re FAKTYCZNIE mogƒÖ poprawiƒá sytuacjƒô u≈ºytkownika
2. Ka≈ºda rekomendacja MUSI zawieraƒá:
   - KonkretnƒÖ akcjƒô (np. "Wyd≈Çu≈º pracƒô o 2 lata")
   - Oszacowany wp≈Çyw (np. "+300 z≈Ç/mies" lub "+8%")
   - Ikona emoji na poczƒÖtku
3. Sortuj od najwiƒôkszego do najmniejszego wp≈Çywu
4. Je≈õli sytuacja jest bardzo dobra (znacznie powy≈ºej ≈õredniej), zaproponuj optymalizacje podatkowe lub inwestycyjne
5. Je≈õli sytuacja jest s≈Çaba, skup siƒô na praktycznych dzia≈Çaniach: PPK, IKE, IKZE, wyd≈Çu≈ºenie pracy
6. MAX 5 rekomendacji, ka≈ºda w osobnej linii
7. Format: "üéØ [Akcja] ‚Äì [Wp≈Çyw]"

NIE u≈ºywaj numeracji, tylko emoji i my≈õlniki.`;

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: "Wygeneruj rekomendacje dla tego u≈ºytkownika." }
        ],
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("AI gateway error:", response.status, errorText);
      
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Przekroczono limit zapyta≈Ñ. Spr√≥buj ponownie za chwilƒô." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Wymagana p≈Çatno≈õƒá. Dodaj ≈õrodki do swojego konta Lovable." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      throw new Error(`AI gateway error: ${response.status}`);
    }

    const data = await response.json();
    const recommendations = data.choices?.[0]?.message?.content;

    console.log("Recommendations generated successfully");

    return new Response(
      JSON.stringify({ recommendations }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Error in generate-retirement-recommendations:", error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : "Unknown error" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
